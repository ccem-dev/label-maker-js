(function() {
  'use strict';
  
  angular
    .module('otusjs.labelMaker.setupView',[]);
}());

(function() {
  'use strict';

  angular
    .module('otusjs.labelMaker.setupView')
    .component('labelMaker', {
      template:'<div layout="row" layout-align="center center"><md-button class="md-raised md-primary" ng-click="$ctrl.generateLabelPage()">Gerar Etiquetas</md-button></div>',
      controller: Controller,
      bindings: {
        labelData: '<'
      }
    });

  Controller.$inject = [
    '$scope',
    '$rootScope',
    '$compile',
    '$element',
    'otusjs.labelMaker.labelBuilder.LabelService'
  ];

  function Controller($scope, $rootScope, $compile, $element, LabelService) {
    var self = this;
    var LABEL_PAGE = '<label-page/>';

    self.generateLabelPage = generateLabelPage;

    $scope.$on("Data_Ready", function(event) {
      self.ready = true;
    });

    $scope.$on("Data_Error", function(event) {
      self.dataError = true;
    });

    function generateLabelPage() {
      var scope = $rootScope.$new();
      scope.labelData = self.labelData
      var labelPage = $compile(LABEL_PAGE)(scope);
    }

  }
}());

(function() {
  'use strict';

  angular
    .module('otusjs.labelMaker.labelBuilder',[
      'otusjs.labelMaker.labelBuilder.labelComponents'
    ]);
}());

(function() {
  'use strict';

  angular
    .module('otusjs.labelMaker.labelBuilder')
    .service('otusjs.labelMaker.labelBuilder.LabelService', Service);

  Service.$inject = [
     '$compile',
      'otusjs.labelMaker.dataBuilder.DataBuilderService',
    ];

  function Service($compile, DataBuilderService) {
    var self = this;

    _init();
    /* Public Interface */
    self.getBioMaterialList = getBioMaterialList;
    self.getBaseInfo = getBaseInfo;
    self.getLaboratoryInfo = getLaboratoryInfo;
    self.pushInfo = pushInfo;

    function _init() {
      //DataBuilderService.fetchTubesData();
    }

    function pushInfo(json) {
      return DataBuilderService.pushInfo(json);
    }

    function getLaboratoryInfo() {
      return DataBuilderService.getLaboratoryInfo();
    }

    function getBaseInfo() {
      return DataBuilderService.getBaseInfo();
   }

    function getBioMaterialList($scope) {
      return DataBuilderService.getBioMaterialList();
    }

  }
}());

(function() {
  'use strict';

  angular
    .module('otusjs.labelMaker.labelBuilder.labelComponents', [])
    .constant(
      'BARCODE_DEFAULT_SETTINGS', {
        format: 'CODE39',
        width: 1.1,
        height: 15,
        displayValue: true,
        font: "monospace",
        textAlign: "center",
        fontSize: 10,
        //   backgroundColor: "",
        //   lineColor: "#000"
      }
    ).constant(
      'BARCODE_SMALL_SETTINGS', {
        format: 'CODE39',
        width: 0.4,
        height: 20,
        displayValue: true,
        font: "monospace",
        textAlign: "center",
        fontSize: 10,
        //   backgroundColor: "",
        //   lineColor: "#000"
      }).constant(
      'BARCODE_BIGGER_SETTINGS', {
        format: 'CODE39',
        width: 0.4,
        height: 30,
        displayValue: true,
        font: "monospace",
        textAlign: "center",
        fontSize: 10,
        //   backgroundColor: "",
        //   lineColor: "#000"
      });
}());

(function() {
    'use strict';

    angular
      .module('otusjs.labelMaker.labelBuilder.labelComponents')
      .component('defaultLabel', {
          transclude: true,
          template:'<div ng-show="$ctrl.componentLabel == \'participant\' && $ctrl.type == \'barcode\'" class="default-label"><div class="default-label-text"><h3>{{$ctrl.baseInfo.participant_name}}</h3><span>CQ:{{$ctrl.baseInfo.cq_group}}</span><br></div><svg id="participantbarcode" class="barcode"></svg></div><div ng-show="$ctrl.componentLabel == \'participant\' && $ctrl.type == \'qrcode\'" layout="row" layout-align="space-between center" class="default-label"><div><div class="default-label-text"><h3>{{$ctrl.baseInfo.participant_name}}</h3><span>CQ:{{$ctrl.baseInfo.cq_group}}</span><br></div></div><div><div id="participantqr" class="qrcode"></div></div></div><div ng-show="$ctrl.componentLabel == \'biomaterial\' && $ctrl.type == \'barcode\'" class="default-label"><p>{{$ctrl.biomaterial.label}}</p><div ng-show="$ctrl.identified" ng-style=\'{"overflow": "hidden","white-space": "nowrap","text-overflow": "ellipsis"}\'><span>{{$ctrl.baseInfo.participant_name}}</span><br></div><div ng-show="$ctrl.identified" layout-align="space-between center" layout="row" flex><span>NR:{{$ctrl.baseInfo.recruitment_number}}</span> <span>Sexo:{{$ctrl.baseInfo.gender}}</span></div><div ng-show="$ctrl.identified" layout-align="space-between center" layout="row" flex><span>DN:{{$ctrl.baseInfo.birthday}}</span> <span ng-show="$ctrl.baseInfo.laboratoryIdentification != null">Kit: {{$ctrl.baseInfo.laboratoryIdentification}}</span></div><svg id="biomaterialbarcode" class="barcode"></svg></div><div ng-show="$ctrl.componentLabel == \'biomaterial\' && $ctrl.type == \'qrcode\'" layout="row" layout-align="space-between center" class="default-label"><div><p>{{$ctrl.biomaterial.label}}</p><div ng-show="$ctrl.identified" ng-style=\'{"overflow": "hidden","white-space": "nowrap","text-overflow": "ellipsis"}\'><span>{{$ctrl.baseInfo.participant_name}}</span><br></div><div ng-show="$ctrl.identified" layout-align="space-between center" layout="row" flex><span>NR:{{$ctrl.baseInfo.recruitment_number}}</span> <span>Sexo:{{$ctrl.baseInfo.gender}}</span></div><div ng-show="$ctrl.identified" layout-align="space-between center" layout="row" flex><span>DN:{{$ctrl.baseInfo.birthday}}</span> <span ng-show="$ctrl.baseInfo.laboratoryIdentification != null">Kit: {{$ctrl.baseInfo.laboratoryIdentification}}</span></div></div><div><div id="biomaterialqr" class="qrcode"></div></div></div><div ng-show="$ctrl.componentLabel == \'unattached\'" class="default-label"><div class="default-label-text"><p>Laborat√≥rio</p><span>Centro:{{$ctrl.baseInfo.laboratoryFieldCenter}}</span><br><span>CQ:{{$ctrl.baseInfo.cq_group}}</span><br></div><svg ng-show="$ctrl.type == \'barcode\'" id="unattachedbarcode" class="barcode"></svg><div ng-show="$ctrl.type == \'qrcode\'" id="unattachedqr" class="qrcode"></div></div>',
          controller: Controller,
          bindings: {
            componentLabel: "<",
            base: '<',
            biomaterial: '<'
          }
      });

      Controller.$inject = [
        '$scope',
        '$element',
        '$compile',
        'BARCODE_DEFAULT_SETTINGS'
      ];

      function Controller($scope, $element, $compile, BARCODE_SETTINGS) {
        var self = this;

        self.renderBarcode = renderBarcode;
        self.baseInfo = angular.copy(self.base);
        self.identified = self.baseInfo.printStructure.identified.value;
        self.type = self.baseInfo.printStructure.type.value;

        self.$onInit = function() {
          $compile($element.contents())($scope);
          if(self.biomaterial.hasOwnProperty('aliquotCode')){
            self.biomaterial.code = self.biomaterial.aliquotCode
          }
          if(self.type == 'qrcode') {
            renderQrcode();
          }else if(self.type == 'barcode') {
            renderBarcode();
          }
        };

        function renderBarcode() {
          if(self.componentLabel == 'participant') {
            var barcodeContainer = $element.find('#participantbarcode')[0];
            JsBarcode(barcodeContainer, self.baseInfo.recruitment_number, BARCODE_SETTINGS);
          }else if(self.componentLabel == 'biomaterial') {
            var barcodeContainer = $element.find('#biomaterialbarcode')[0];
            JsBarcode(barcodeContainer, self.biomaterial.code, BARCODE_SETTINGS)
          }else if(self.componentLabel == 'unattached') {
            var barcodeContainer = $element.find('#unattachedbarcode')[0];
            JsBarcode(barcodeContainer, self.baseInfo.laboratoryIdentification, BARCODE_SETTINGS)
          }
        }

        function renderQrcode() {
          var typeNumber = 2;
          var errorCorrectionLevel = 'L';
          var qr = qrcode(typeNumber, errorCorrectionLevel);

          if(self.componentLabel == 'participant'){
            addQrIntoElement(qr, "#participantqr", self.baseInfo.recruitment_number.toString())
          }else if(self.componentLabel == 'biomaterial') {
            addQrIntoElement(qr, "#biomaterialqr", self.biomaterial.code)
          }else if(self.componentLabel == 'unattached') {
            addQrIntoElement(qr, '#unattachedqr', self.baseInfo.laboratoryIdentification)
          }
        }

        function addQrIntoElement(qr, elementId, datastring){
          var qrcodeContainer = $element.find(elementId)[0]
          qr.addData(datastring);
          qr.make();
          qrcodeContainer.innerHTML = qr.createImgTag()
        }
      }
}());

(function() {
    'use strict';

    angular
      .module('otusjs.labelMaker.labelBuilder.labelComponents')
      .component('smallLabel', {
          transclude: true,
          template:'<div ng-show="$ctrl.componentLabel == \'participant\'" layout="row" class="small-label"><div class="small-useble-label"><svg ng-show="$ctrl.type == \'barcode\'" id="participantbarcode" class="barcode"></svg><div ng-show="$ctrl.type == \'qrcode\'" id="participantqr" class="qrcode"></div></div><div class="small-unuseble-label"></div></div><div ng-show="$ctrl.componentLabel == \'biomaterial\'" layout="row" class="small-label"><div class="small-useble-label"><svg ng-show="$ctrl.type == \'barcode\'" id="biomaterialbarcode" class="barcode"></svg><div ng-show="$ctrl.type == \'qrcode\'" id="biomaterialqr" class="qrcode"></div></div><div class="small-unuseble-label"></div></div><div ng-show="$ctrl.componentLabel == \'unattached\'" layout="row" class="small-label"><div class="small-useble-label"><svg ng-show="$ctrl.type == \'barcode\'" id="unattachedbarcode" class="barcode"></svg><div ng-show="$ctrl.type == \'qrcode\'" id="unattachedqr" class="qrcode"></div></div><div class="small-unuseble-label"></div></div>',
          controller: Controller,
          bindings: {
            componentLabel: "<",
            base: '<',
            biomaterial: '<'
          }
      });

      Controller.$inject = [
        '$scope',
        '$element',
        '$compile',
        'BARCODE_SMALL_SETTINGS'
      ];

      function Controller($scope, $element, $compile, BARCODE_SETTINGS) {
        var self = this;

        self.renderBarcode = renderBarcode;
        self.baseInfo = angular.copy(self.base);
        self.type = self.baseInfo.printStructure.type.value;

        self.$onInit = function() {
          $compile($element.contents())($scope);
          if(self.biomaterial.hasOwnProperty('aliquotCode')){
            self.biomaterial.code = self.biomaterial.aliquotCode
          }
          if(self.type == 'qrcode') {
            renderQrcode();
          }else if(self.type == 'barcode') {
            renderBarcode();
          }
        };

        function renderBarcode() {
          if(self.componentLabel == 'participant') {
            var barcodeContainer = $element.find('#participantbarcode')[0];
            JsBarcode(barcodeContainer, self.baseInfo.recruitment_number, BARCODE_SETTINGS);
          }else if(self.componentLabel == 'biomaterial') {
            var barcodeContainer = $element.find('#biomaterialbarcode')[0];
            JsBarcode(barcodeContainer, self.biomaterial.code, BARCODE_SETTINGS)
          }else if(self.componentLabel == 'unattached') {
            var barcodeContainer = $element.find('#unattachedbarcode')[0];
            JsBarcode(barcodeContainer, self.baseInfo.laboratoryIdentification, BARCODE_SETTINGS)
          }
        }

        function renderQrcode() {
          var typeNumber = 2;
          var errorCorrectionLevel = 'L';
          var qr = qrcode(typeNumber, errorCorrectionLevel);

          if(self.componentLabel == 'participant'){
            addQrIntoElement(qr, "#participantqr", self.baseInfo.recruitment_number.toString())
          }else if(self.componentLabel == 'biomaterial') {
            addQrIntoElement(qr, "#biomaterialqr", self.biomaterial.code)
          }else if(self.componentLabel == 'unattached') {
            addQrIntoElement(qr, '#unattachedqr', self.baseInfo.laboratoryIdentification)
          }
        }

        function addQrIntoElement(qr, elementId, datastring){
          var qrcodeContainer = $element.find(elementId)[0]
          qr.addData(datastring);
          qr.make();
          qrcodeContainer.innerHTML = qr.createSvgTag(1.5)
        }
      }
}());

(function() {
    'use strict';

    angular
      .module('otusjs.labelMaker.labelBuilder.labelComponents')
      .component('biggerLabel', {
          transclude: true,
          template:'<div ng-show="$ctrl.componentLabel == \'participant\'" layout="column" layout-align="start center" class="bigger-label"><p>{{$ctrl.baseInfo.participant_name}}</p><div ng-style=\'{"overflow": "hidden","white-space": "nowrap","text-overflow": "ellipsis"}\'><span>{{$ctrl.baseInfo.recruitment_number}}</span><br></div><div ng-style=\'{"overflow": "hidden","white-space": "nowrap","text-overflow": "ellipsis"}\'><span>DN: {{$ctrl.baseInfo.birthday}}</span><br></div><svg ng-show="$ctrl.type == \'barcode\'" id="participantbarcode" class="barcode"></svg><div ng-show="$ctrl.type == \'qrcode\'" id="participantqr" class="qrcode"></div></div><div ng-show="$ctrl.componentLabel == \'biomaterial\'" layout="column" layout-align="start center" class="bigger-label"><div ng-style=\'{"overflow": "hidden","white-space": "nowrap","text-overflow": "ellipsis"}\'>{{$ctrl.biomaterial.label}}</div><div ng-show="$ctrl.identified" ng-style=\'{"overflow": "hidden","white-space": "nowrap","text-overflow": "ellipsis"}\'><span>{{$ctrl.baseInfo.participant_name}}</span><br></div><div ng-style=\'{"overflow": "hidden","white-space": "nowrap","text-overflow": "ellipsis"}\'><span>{{$ctrl.biomaterial.code}}</span><br></div><svg ng-show="$ctrl.type == \'barcode\'" id="biomaterialbarcode" class="barcode"></svg><div ng-show="$ctrl.type == \'qrcode\'" id="biomaterialqr" class="qrcode"></div></div><div ng-show="$ctrl.componentLabel == \'unattached\'" class="bigger-label"><div class="bigger-label-text"><p>Laborat√≥rio</p><span>Centro:{{$ctrl.baseInfo.laboratoryFieldCenter}}</span><br><span>CQ:{{$ctrl.baseInfo.cq_group}}</span><br></div><svg ng-show="$ctrl.type == \'barcode\'" id="unattachedbarcode" class="barcode"></svg><div ng-show="$ctrl.type == \'qrcode\'" id="unattachedqr" class="qrcode"></div></div>',
          controller: Controller,
          bindings: {
            componentLabel: "<",
            base: '<',
            biomaterial: '<'
          }
      });

      Controller.$inject = [
        '$scope',
        '$element',
        '$compile',
        'BARCODE_BIGGER_SETTINGS'
      ];

      function Controller($scope, $element, $compile, BARCODE_SETTINGS) {
        var self = this;

        self.renderBarcode = renderBarcode;
        self.baseInfo = angular.copy(self.base);
        self.identified = self.baseInfo.printStructure.identified.value;
        self.type = self.baseInfo.printStructure.type.value;

        self.$onInit = function() {
          $compile($element.contents())($scope);
          if(self.biomaterial.hasOwnProperty('aliquotCode')){
            self.biomaterial.code = self.biomaterial.aliquotCode
          }
          if(self.type == 'qrcode') {
            renderQrcode();
          }else if(self.type == 'barcode') {
            renderBarcode();
          }
        };

        function renderBarcode() {
          if(self.componentLabel == 'participant') {
            var barcodeContainer = $element.find('#participantbarcode')[0];
            JsBarcode(barcodeContainer, self.baseInfo.recruitment_number, BARCODE_SETTINGS);
          }else if(self.componentLabel == 'biomaterial') {
            var barcodeContainer = $element.find('#biomaterialbarcode')[0];
            JsBarcode(barcodeContainer, self.biomaterial.code, BARCODE_SETTINGS)
          }else if(self.componentLabel == 'unattached') {
            var barcodeContainer = $element.find('#unattachedbarcode')[0];
            JsBarcode(barcodeContainer, self.baseInfo.laboratoryIdentification, BARCODE_SETTINGS)
          }
        }

        function renderQrcode() {
          var typeNumber = 4;
          var errorCorrectionLevel = 'L';
          var qr = qrcode(typeNumber, errorCorrectionLevel);

          if(self.componentLabel == 'participant'){
            addQrIntoElement(qr, "#participantqr", self.baseInfo.recruitment_number.toString())
          }else if(self.componentLabel == 'biomaterial') {
            addQrIntoElement(qr, "#biomaterialqr", self.biomaterial.code)
          }else if(self.componentLabel == 'unattached') {
            addQrIntoElement(qr, '#unattachedqr', self.baseInfo.laboratoryIdentification)
          }
        }

        function addQrIntoElement(qr, elementId, datastring){
          var qrcodeContainer = $element.find(elementId)[0]
          qr.addData(datastring);
          qr.make();
          qrcodeContainer.innerHTML = qr.createImgTag()
        }
      }
}());

(function() {
  'use strict';

  angular
    .module('otusjs.labelMaker.labelBuilder.labelComponents')
    .component('biomaterialLabel', {
      transclude: true,
      template:'<div><div ng-if="$ctrl.labelSize == \'default\'"><default-label biomaterial="$ctrl.biomaterial" base="$ctrl.baseInfo" component-label="\'biomaterial\'"></default-label></div><div ng-if="$ctrl.labelSize == \'small\'"><small-label biomaterial="$ctrl.biomaterial" base="$ctrl.baseInfo" component-label="\'biomaterial\'"></small-label></div><div ng-if="$ctrl.labelSize == \'bigger\'"><bigger-label biomaterial="$ctrl.biomaterial" base="$ctrl.baseInfo" component-label="\'biomaterial\'"></bigger-label></div></div>',
      controller: Controller,
      bindings: {
        base: '<',
        biomaterial: '<'
      }
    });

  Controller.$inject = [
    '$scope',
    '$element',
    '$compile'
  ];

  function Controller($scope, $element, $compile) {
    var self = this;

    self.baseInfo = angular.copy(self.base);
    self.labelSize = self.baseInfo.printStructure.labelSize.value;

    self.$onInit = function() {
      $compile($element.contents())($scope);
    };
  }
}());

(function() {
    'use strict';

    angular
      .module('otusjs.labelMaker.labelBuilder.labelComponents')
      .component('participantLabel', {
          transclude: true,
          template:'<div><div ng-if="$ctrl.labelSize == \'default\'"><default-label component-label="\'participant\'" base="$ctrl.baseInfo"></default-label></div><div ng-if="$ctrl.labelSize == \'small\'"><small-label ng-show="$ctrl.baseInfo.printStructure.labelSize.value == \'small\'" component-label="\'participant\'" base="$ctrl.baseInfo"></small-label></div><div ng-if="$ctrl.labelSize == \'bigger\'"><bigger-label ng-show="$ctrl.baseInfo.printStructure.labelSize.value == \'bigger\'" component-label="\'participant\'" base="$ctrl.baseInfo"></bigger-label></div></div>',
          controller: Controller,
          bindings: {
            base: '<'
          }
      });

      Controller.$inject = [
        '$scope',
        '$element',
        '$compile',
      ];

      function Controller($scope, $element, $compile) {
        var self = this;

        self.baseInfo = angular.copy(self.base);
        self.labelSize = self.baseInfo.printStructure.labelSize.value;

        self.$onInit = function() {
          $compile($element.contents())($scope);
        };

      }
}());

(function() {
    'use strict';

    angular
      .module('otusjs.labelMaker.labelBuilder.labelComponents')
      .component('unattachedLabel', {
          transclude: true,
          template:'<div><div ng-if="$ctrl.labelSize == \'default\'"><default-label ng-show="$ctrl.baseInfo.printStructure.labelSize.value == \'default\'" component-label="\'unattached\'" base="$ctrl.baseInfo"></default-label></div><div ng-if="$ctrl.labelSize == \'small\'"><small-label ng-show="$ctrl.baseInfo.printStructure.labelSize.value == \'small\'" component-label="\'unattached\'" base="$ctrl.baseInfo"></small-label></div><div ng-if="$ctrl.labelSize == \'bigger\'"><bigger-label ng-show="$ctrl.baseInfo.printStructure.labelSize.value == \'bigger\'" component-label="\'unattached\'" base="$ctrl.baseInfo"></bigger-label></div></div>',
          controller: Controller,
          bindings: {
            base: '<',
            labInfo: '='
          }
      });

      Controller.$inject = [
        '$scope',
        '$element',
        '$compile',
      ];

      function Controller($scope, $element, $compile) {
        var self = this;

        self.baseInfo = angular.copy(self.base);
        self.labelSize = self.baseInfo.printStructure.labelSize.value;

        self.$onInit = function() {
          $compile($element.contents())($scope);
        };

      }
}());

(function () {
  'use strict';

  angular
    .module('otusjs.labelMaker.labelPage', []);
}());

(function() {
  'use strict';

  angular
    .module('otusjs.labelMaker.labelPage')
    .directive('labelPage', directive);

  directive.$inject = [
    '$window',
    '$compile',
    'otusjs.labelMaker.labelBuilder.LabelService'
  ];

  function directive($window, $compile, LabelService) {
    var ddo = {
      restrict: 'EA',
      scope: {},
      transclude: true,
      template:'<div id="print-page" layout-align="start center" ng-if="$ctrl.loadComponents"><ul ng-class="\'label-grid\'"><li ng-if="$ctrl.laboratoryInfo.laboratoryIdentification == null && $ctrl.baseInfo.printStructure.identified.value"><participant-label base="$ctrl.baseInfo" ng-if="$ctrl.laboratoryInfo.laboratoryIdentification == null && $ctrl.baseInfo.printStructure.identified.value"></participant-label></li><li ng-if="$ctrl.laboratoryInfo.laboratoryIdentification != null"><unattached-label base="$ctrl.laboratoryInfo" ng-if="$ctrl.laboratoryInfo.laboratoryIdentification != null"></unattached-label></li><li class="green" ng-repeat="biomaterial in $ctrl.newList track by $index"><biomaterial-label base="$ctrl.baseInfo" biomaterial="biomaterial"></biomaterial-label></li></ul></div>',
      controller: Controller,
      controllerAs: '$ctrl',
    };

    function Controller($element, $scope) {
      var self = this;
      self.printPage = self.printPage;
      self.newbiomaterialList = []

      init();

      function init() {
        self.baseInfo = {};
        self.bioMaterialList = [];
        LabelService.pushInfo($scope.$parent.labelData);
        _setInfo();
      }

      function _setInfo() {
        self.bioMaterialList = LabelService.getBioMaterialList();
        self.bioMaterialList.forEach(biomaterial => {
          fillArray(biomaterial, biomaterial.printStructure.quantity)
        })
        self.baseInfo = LabelService.getBaseInfo();
        self.laboratoryInfo = LabelService.getLaboratoryInfo();
        self.printStructure = self.baseInfo.printStructure;
        _verifyLabelSize();
        self.loadComponents = true;
      }

      function fillArray(value, len) {
        for (var i = 0; i < len; i++) {
          self.newbiomaterialList.push(value);
        }
      }

      function _verifyLabelSize() {
        if(self.printStructure.labelSize.value == 'bigger'){
          _setBiggerLabel();
        }else if(self.printStructure.labelSize.value == 'small') {
          _setSmallLabel();
        }else if(self.printStructure.labelSize.value == 'default') {
          _setDefaultLabel();
        }
      }

      function _setBiggerLabel() {
        self.baseStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/bigger-label.min.css"/>'
        self.printStructure.columns == 1 ? self.printStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/bigger-label-columns-1.min.css"/>' :
          self.printStructure.columns == 2 ? self.printStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/bigger-label-columns-2.min.css"/>' :
            self.printStructure.columns == 3 ? self.printStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/bigger-label-columns-3.min.css"/>' :
              self.printStructure.columns == 4 ? self.printStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/bigger-label-columns-4.min.css"/>' : ""
      }

      function _setSmallLabel() {
        self.baseStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/small-label.min.css"/>'
        self.printStructure.columns == 1 ? self.printStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/small-label-columns-1.min.css"/>' :
          self.printStructure.columns == 2 ? self.printStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/small-label-columns-2.min.css"/>' :
            self.printStructure.columns == 3 ? self.printStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/small-label-columns-3.min.css"/>' :
              self.printStructure.columns == 4 ? self.printStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/small-label-columns-4.min.css"/>' : ""
      }

      function _setDefaultLabel() {
        if(self.printStructure.type.value == 'qrcode'){
          self.baseStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/default-label-qr.min.css"/>'
        }else {
          self.baseStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/default-label.min.css"/>'
        }
        self.printStructure.columns == 1 ? self.printStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/default-label-columns-1.min.css"/>' :
          self.printStructure.columns == 2 ? self.printStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/default-label-columns-2.min.css"/>' :
            self.printStructure.columns == 3 ? self.printStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/default-label-columns-3.min.css"/>' :
              self.printStructure.columns == 4 ? self.printStyle = '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/default-label-columns-4.min.css"/>' : ""
      }

      $scope.$$postDigest(function() {
        _generateWindow();
      });

      function _generateWindow() {
        var newWindow = $window.open('about:blank', '_blank');
        newWindow.document.write('<html>' +
          '<head><title>Etiquetas</title>' +
          '<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,400italic" rel="stylesheet" />' +
          '<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />' +
          `<link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/angular_material/1.1.1/angular-material.min.css">` +
          '<link rel="stylesheet" type="text/css" href="node_modules/label-maker-js/dist/label-maker-js/css/otusjs-label-page.min.css"/>' +
          self.baseStyle +
          self.printStyle +
          '</head>' +
          '<button class="no-print button-print md-button md-fab md-mini" onclick="window.print()" >' +
          '<i class="material-icons white">print</i>'+
          '</button>' +
          '<body></body>' +
          '<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js" type="text/javascript"></script></html>');

         angular.element(newWindow.document.body)
          .append($element.contents());
        newWindow.document.close();
      }

    }
    return ddo;
  }
}());

(function() {
  'use strict';

  angular
    .module('otusjs.labelMaker.dataBuilder',['ngResource']);
}());

(function () {
  'use strict';

  angular
    .module('otusjs.labelMaker.dataBuilder')
    .service('otusjs.labelMaker.dataBuilder.DataBuilderService', Service);

  Service.$inject = [
    '$rootScope',
    '$resource'
  ];

  function Service($rootScope, $resource) {
    var self = this,

      _baseInfo = {},
      _unattachedLaboratoryInfo = {},
      _bioMaterialList,
      baseInfoModel = {
        cq_group: null,
        participant_name: null,
        recruitment_number: null,
        gender: null,
        birthday: null
      },
      unattachedLaboratoryInfoModel = {
        cq_group: null,
        laboratoryIdentification: null,
        laboratoryFieldCenter: null
      };

    self.fetchBioMaterialData = fetchBioMaterialData;
    self.getBaseInfo = getBaseInfo;
    self.getLaboratoryInfo = getLaboratoryInfo;
    self.getBioMaterialList = getBioMaterialList;
    self.pushInfo = pushInfo;

    function fetchBioMaterialData() {
      _getInfo().getData().$promise
        .then(function (data) {
          _setInfo(data);
          $rootScope.$broadcast("Data_Ready", data);
        })
        .catch(function (err) {
          $rootScope.$broadcast("Data_Error", err); //TODO set listener
        });
    }

    function getBaseInfo() {
      return _baseInfo;
    }

    function getLaboratoryInfo() {
      return _unattachedLaboratoryInfo;
    }

    function getBioMaterialList() {
      return _bioMaterialList;
    }

    function _setInfo(data) {
      angular.extend(_baseInfo, baseInfoModel, data);
      angular.extend(_unattachedLaboratoryInfo, unattachedLaboratoryInfoModel, data);
      _bioMaterialList = data.tubes ? data.tubes : data.aliquots ;
    }

    function pushInfo(labParticipant) {
      if (labParticipant) {
        var parse = labParticipant;
        _setInfo(parse);
      } else {
        fetchBioMaterialData();
      }
    }

    function _getInfo() {
      var params = {
        participant_id: ''
      };

      return $resource('app/assets/participant-tubes-set.json', params, {
        getData: {
          method: 'GET',
          isArray: false
        }
      });
    }
  }
}());
